<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wsika</title>
  <subtitle>Design by 一个卖艺的小青年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meikus.com/"/>
  <updated>2017-04-10T12:44:00.651Z</updated>
  <id>http://meikus.com/</id>
  
  <author>
    <name>Wangshicheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue的概念 之模版引擎</title>
    <link href="http://meikus.com/2017/04/10/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://meikus.com/2017/04/10/模板引擎/</id>
    <published>2017-04-10T12:14:58.000Z</published>
    <updated>2017-04-10T12:44:00.651Z</updated>
    
    <content type="html"><![CDATA[<p>模板引擎<br>    通常这个概念出现在应用层（MVC层的View） express jade ejs<br>    客户端Http请求–&gt;应用层的控制器（Controller）<br>    应用层的服务层（service,访问数据库）-》封装到模型层（Model）-&gt;<br>    跳转到视图层（View,模板引擎）-&gt;生成HTML代码-》返回给客户端浏览器</p>
<pre><code>window.onload=function(){
    vue(&quot;#app&quot;,{
        message:&quot;hello vue!&quot;,
        pData:&apos;this is p data&apos;
    })
    function vue(id,data){
        var context = document.querySelector(id);
        var html = context.html;
        var regex = /(\{\{\s*([\w]+)\s*\}\})/g;
        while(regex.exec(html)){
            html = html.replace(new RegExp(RegExp.$1,&quot;g&quot;),data[RegExp.$2])
        }
        context.innerHTML = html;
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板引擎&lt;br&gt;    通常这个概念出现在应用层（MVC层的View） express jade ejs&lt;br&gt;    客户端Http请求–&amp;gt;应用层的控制器（Controller）&lt;br&gt;    应用层的服务层（service,访问数据库）-》封装到模型层（Model
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Callback,Promise,Genratro,async/await对比</title>
    <link href="http://meikus.com/2017/03/10/callback/"/>
    <id>http://meikus.com/2017/03/10/callback/</id>
    <published>2017-03-10T13:14:58.000Z</published>
    <updated>2017-03-20T13:32:10.926Z</updated>
    
    <content type="html"><![CDATA[<p>js执行分同步执行和异步执行</p>
<p><a href="https://www.lazycoffee.com/articles/view?id=58ab09eea072b332753d9774" target="_blank" rel="external">https://www.lazycoffee.com/articles/view?id=58ab09eea072b332753d9774</a><br>js代码的书写问题<br>    同步编程。。异步编程<br>任务:泡茶<br>分为 3个事件 烧水 洗杯子 准备茶叶<br>callbackhell(回调嵌套) 能够保证事件的执行顺序额：同步式写法</p>
<p>Promised 的四个要求<br>    1、学会封装promise对象<br>    2、then的使用,链式调用<br>    3、all()的使用 组合式关系<br>    4、race的使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js执行分同步执行和异步执行&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lazycoffee.com/articles/view?id=58ab09eea072b332753d9774&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>懒加载</title>
    <link href="http://meikus.com/2017/03/10/lazyload/"/>
    <id>http://meikus.com/2017/03/10/lazyload/</id>
    <published>2017-03-10T13:14:58.000Z</published>
    <updated>2017-03-16T12:20:10.906Z</updated>
    
    <content type="html"><![CDATA[<p>实现原理<br>延迟加载</p>
<p>img src 1*1 小图片占位符 data-url=”xxxxx”<br>优点：</p>
<p>预加载<br>提前加载图片 牺牲服务器性能</p>
<p>对比  懒加载 预加载<br>相同点：目的为了提高用户体验，提高页面浏览速度<br>不同点：</p>
<p>1:懒加载技术<br>2：函数 闭包</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现原理&lt;br&gt;延迟加载&lt;/p&gt;
&lt;p&gt;img src 1*1 小图片占位符 data-url=”xxxxx”&lt;br&gt;优点：&lt;/p&gt;
&lt;p&gt;预加载&lt;br&gt;提前加载图片 牺牲服务器性能&lt;/p&gt;
&lt;p&gt;对比  懒加载 预加载&lt;br&gt;相同点：目的为了提高用户体验，提高页面浏览速度
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>es6content</title>
    <link href="http://meikus.com/2017/03/10/es6content/"/>
    <id>http://meikus.com/2017/03/10/es6content/</id>
    <published>2017-03-10T13:14:58.000Z</published>
    <updated>2017-03-10T14:26:04.443Z</updated>
    
    <content type="html"><![CDATA[<p>1:先全局安装<br>npm install -g  babel-cli<br>2：npm install babel</p>
<p>babel 将e6 编译成es5<br>babel es6.js –out-file dist-es5.js –presets es2015<br>dist 目录需要手动创建<br>babel es6.js -w –out-file dist-es5.js –presets es2015 自动监控<br>browser-sync  自动化测试服务<br>启动web服务命令 browser-sync start –server –files “**” 监控所有文件<br>babel-core 使用在浏览器中编译ES6 转成ES6</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1:先全局安装&lt;br&gt;npm install -g  babel-cli&lt;br&gt;2：npm install babel&lt;/p&gt;
&lt;p&gt;babel 将e6 编译成es5&lt;br&gt;babel es6.js –out-file dist-es5.js –presets es2015
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>复制数组</title>
    <link href="http://meikus.com/2017/02/13/%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://meikus.com/2017/02/13/复制数组/</id>
    <published>2017-02-13T12:31:43.000Z</published>
    <updated>2017-02-13T12:54:14.774Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="在chrome浏览器测试"><a href="#在chrome浏览器测试" class="headerlink" title="在chrome浏览器测试"></a>在chrome浏览器测试</h3><pre><code>var a = [1,2,3]
var b =a;
console.log(b)
=&gt;[1, 2, 3]
b.push(4);
a=b=&gt;[1, 2, 3, 4]
a===b?
true
var d = [1,2,3]
var e = [...d]
e=&gt;[1, 2, 3]
e.push(4)
e=&gt;[1, 2, 3, 4]
d=&gt;[1, 2, 3]
d===e
false
</code></pre><p>这里主要是注意[…Arry]</p>
<p>是在内存中复制了相同值的数组，但是这两个数组在内存中的地址是不同的</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;在chrome浏览器测试&quot;&gt;&lt;a href=&quot;#在chrome浏览器测试&quot; class=&quot;headerlink&quot; title=&quot;在chrome浏览器测试&quot;&gt;&lt;/a&gt;在chrome浏览器测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何设置hexo标签tag</title>
    <link href="http://meikus.com/2017/02/12/hexo-tag/"/>
    <id>http://meikus.com/2017/02/12/hexo-tag/</id>
    <published>2017-02-12T01:17:58.000Z</published>
    <updated>2017-02-12T02:54:10.625Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>1、这是你要发布的新文章，注意tags就是该文章的标签<br>2、在命令行中输入$ hexo new page tags</p>
<h2 id="3、这时会在在sources-tags里面有个index-md的文件，打开这个文件编辑"><a href="#3、这时会在在sources-tags里面有个index-md的文件，打开这个文件编辑" class="headerlink" title="3、这时会在在sources/tags里面有个index.md的文件，打开这个文件编辑"></a>3、这时会在在sources/tags里面有个index.md的文件，打开这个文件编辑</h2><pre><code>title: tags
date: 2016-11-11 21:40:58
type: &quot;tags&quot;
---
</code></pre><p>type: 改成tags<br>4、在主题配置文件中，在menu项下，要把tags页打开如<br>menu:<br>  home: /<br>  categories: /categories</p>
<p>  #about: /about<br>  archives: /archives<br>  tags: /tags    //确保标签页已打开</p>
<p>  #schedule: /schedule     </p>
<p>  #commonweal: /404.html  </p>
<p>所有冒号后面都有个空格</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1、这是你要发布的新文章，注意tags就是该文章的标签&lt;br&gt;2、在命令行中输入$ hexo new page tags&lt;/p&gt;
&lt;h2 id=&quot;3、这时会在在sources-tags里面有个index-md的文件，打开这个文件编辑&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://meikus.com/tags/hexo/"/>
    
  </entry>
  
</feed>
